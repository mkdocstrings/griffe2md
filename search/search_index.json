{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"griffe2md","text":"<p>Output API docs to Markdown using Griffe.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install griffe2md\n</code></pre> <p>With <code>uv</code>:</p> <pre><code>uv tool install griffe2md\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Simply call <code>griffe2md</code> with a package name, or the path to a package folder:</p> <pre><code>griffe2md markdown\ngriffe2md path/to/my/src/package\n</code></pre> <p>Use the <code>-o</code>, <code>--output</code> option to write to a file instead of standard output:</p> <pre><code>griffe2md markdown -o markdown.md\n</code></pre> <p><code>griffe2md</code> can be configured in either <code>pyproject.toml</code> or a <code>griffe2md.toml</code> file. The latter can be placed in a <code>.config</code> or <code>config</code> directory in the project root.</p> <p><code>griffe2md.toml</code> file is structured as a simple key-value dictionary, e.g.:</p> <pre><code>docstring_style = \"sphinx\"\n</code></pre> <p>If you configure it in <code>pyproject.toml</code>, the configuration should go under the <code>tool.griffe2md</code> key:</p> <pre><code>[tool.griffe2md]\ndocstring_style = \"sphinx\"\n</code></pre> <p>See the documentation for reference.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#122-2025-08-24","title":"1.2.2 - 2025-08-24","text":"<p>Compare with 1.2.1</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Always wrap headings in backticks (e9de94f by Timoth\u00e9e Mazzucotelli). Issue-11</li> <li>Remove extra new lines in attribute headings, and don't render attribute values in headings (f6d962d by Timoth\u00e9e Mazzucotelli). Issue-11</li> </ul>"},{"location":"changelog/#121-2025-08-19","title":"1.2.1 - 2025-08-19","text":"<p>Compare with 1.2.0</p>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>Update entrypoint to avoid deprecation warning (850ec71 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#120-2025-08-19","title":"1.2.0 - 2025-08-19","text":"<p>Compare with 1.1.0</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Read config from config file or pyproject.toml (c29e483 by Rafal Krupinski). Issue-8, PR-10</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Move modules under internal folder, re-expose API from top-level (151a6ef by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#110-2025-02-11","title":"1.1.0 - 2025-02-11","text":"<p>Compare with 1.0.2</p>"},{"location":"changelog/#build_1","title":"Build","text":"<ul> <li>Drop support for Python 3.8 (823936b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Allow passing partial configuration to relevant functions (4f7682e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#102-2024-09-27","title":"1.0.2 - 2024-09-27","text":"<p>Compare with 1.0.1</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fix spacing around <code>=</code> and <code>-&gt;</code> (e62d67c by Timoth\u00e9e Mazzucotelli). Issue-1</li> </ul>"},{"location":"changelog/#101-2024-08-15","title":"1.0.1 - 2024-08-15","text":"<p>Compare with 1.0.0</p>"},{"location":"changelog/#build_2","title":"Build","text":"<ul> <li>Depend on Griffe 0.49 (e7fef87 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Update code for Griffe 0.49 (b321b39 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#100-2024-01-03","title":"1.0.0 - 2024-01-03","text":"<p>Compare with first commit</p>"},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Bump required Griffe version to 0.36 (7fd172e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Resolve external aliases pointing to objects in corresponding private packages (<code>ast.AST</code> -&gt; <code>_ast.AST</code>) (5630fdf by Timoth\u00e9e Mazzucotelli).</li> <li>Support latest Griffe, add auto-summaries and cross-references (e744fac by Timoth\u00e9e Mazzucotelli).</li> <li>Add initial rendering feature (d6e23ad by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Use all members as well when not grouping by category (b7086c7 by Timoth\u00e9e Mazzucotelli).</li> <li>Never fail when trying to format code with Black (940aa7a by Timoth\u00e9e Mazzucotelli).</li> <li>Add back logger to rendering module (29ff6f8 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't import stuff from mkdocstrings (1108a3f by Timoth\u00e9e Mazzucotelli).</li> <li>Add missing jinja2 dependency (4b9067b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>Never use full path in separate signatures (ddfeac4 by Timoth\u00e9e Mazzucotelli).</li> <li>Use <code>html_links</code> option, stop using Textual click links (f916d90 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev@pawamoy.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd griffe2md\nmake setup\n</code></pre> <p>Note</p> <p>If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>make run griffe2md [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build griffe2md. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.6.2, &gt;=0.49</code> <code>1.12.1.1.3.1</code> ISC Jinja2 A very fast and expressive template engine. <code>&gt;=3.1.2, &gt;=2.10</code> <code>3.1.6</code> BSD License markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0, &gt;=1.0.0, &lt;4.0.0</code> <code>3.0.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>3.0.2</code> BSD License mdformat CommonMark compliant Markdown formatter <code>&gt;=0.7.21, &gt;=0.7.16</code> <code>0.7.22</code> MIT License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT babel Internationalization utilities <code>~=2.10</code> <code>2.17.0</code> BSD-3-Clause backrefs A wrapper around re and regex that adds additional back references. <code>~=5.7.post1</code> <code>5.9</code> MIT beautifulsoup4 Screen-scraping library <code>&gt;=4.12</code> <code>4.13.4</code> MIT License build A simple, correct Python build frontend <code>&gt;=1.2</code> <code>1.3.0</code> MIT cappa Declarative CLI argument parser. <code>&gt;=0.29</code> <code>0.30.0</code> ? certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.8.3</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.14</code> <code>1.17.1</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.3</code> MIT click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.2.1</code> BSD-3-Clause colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=7.5</code> <code>7.10.4</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>45.0.6</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.22</code> Public Domain + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1.6</code> <code>1.6.2</code> ISC execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=1.0.5</code> <code>1.0.6</code> ISC ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.5</code> <code>2.5.3</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.12</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>&gt;=3.1.44</code> <code>3.1.45</code> BSD-3-Clause griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.6.2, &gt;=0.49</code> <code>1.12.1.1.3.1</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD humanize Python humanize utilities <code>&gt;=4.9</code> <code>4.12.3</code> MIT id A tool for generating OIDC identities <code>1.5.0</code> Apache Software License idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License iniconfig brain-dead simple config-ini parsing <code>&gt;=1</code> <code>2.1.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.3.0</code> MIT jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.9.0</code> MIT Jinja2 A very fast and expressive template engine. <code>&gt;=3.1.2, &gt;=2.10</code> <code>3.1.6</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.6.0</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>~=3.2</code> <code>3.8.2</code> BSD-3-Clause markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.8</code> <code>1.11.0.1.1.1</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0, &gt;=1.0.0, &lt;4.0.0</code> <code>3.0.0</code> MIT License markdownify Convert HTML to markdown. <code>&gt;=0.14</code> <code>1.2.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>3.0.2</code> BSD License mdformat CommonMark compliant Markdown formatter <code>&gt;=0.7.21, &gt;=0.7.16</code> <code>0.7.22</code> MIT License mdformat_tables An mdformat plugin for rendering tables. <code>&gt;=1.0</code> <code>1.0.0</code> MIT License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.2</code> ISC mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1.2</code> <code>1.4.7</code> MIT mkdocs-llmstxt MkDocs plugin to generate an /llms.txt file. <code>&gt;=0.2</code> <code>0.3.1</code> ISC mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.6.16+insiders.4.53.16</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.10</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.29</code> <code>0.30.0</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=1.16.2</code> <code>1.16.12.1.12.1</code> ISC more-itertools More routines for operating on iterables, beyond itertools <code>10.7.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1.10</code> <code>1.17.1</code> MIT mypy_extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.1.0</code> MIT nh3 Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.14</code> <code>0.3.0</code> MIT packaging Core utilities for Python packages <code>&gt;=20</code> <code>25.0</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.3.8</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.2</code> <code>1.6.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause Pygments Pygments is a syntax highlighting package written in Python. <code>&gt;=2.7.2</code> <code>2.19.2</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>~=10.2</code> <code>10.16.1</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8.2</code> <code>8.4.1</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=5.0</code> <code>6.2.1</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.16.0</code> MIT License pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.6</code> <code>3.8.0</code> MIT python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>&gt;=2015.7</code> <code>2025.2</code> MIT PyYAML YAML parser and emitter for Python <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>1.1</code> MIT readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 requests Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.32.5</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>14.1.0</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.4</code> <code>0.12.10</code> MIT License SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.4</code> BSD License six Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.17.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.2</code> BSD-3-Clause soupsieve A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.7</code> MIT twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1</code> <code>6.1.0</code> Apache Software License type-lens type-lens is a Python template project designed to simplify the setup of a new project. <code>&gt;=0.2.5</code> <code>0.2.5</code> MIT types-Markdown Typing stubs for Markdown <code>&gt;=3.6</code> <code>3.8.0.20250809</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20250822</code> Apache-2.0 typing_extensions Backported and Experimental Type Hints for Python 3.9+ <code>&gt;=4.9</code> <code>4.14.1</code> PSF-2.0 urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.5.0</code> MIT watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0 wcwidth Measures the displayed width of unicode strings in a terminal <code>&gt;=0.2.13</code> <code>0.2.13</code> MIT yore Manage legacy code with comments. <code>&gt;=0.3.3</code> <code>0.4.5</code> ISC <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2023, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"reference/api/","title":"API reference","text":""},{"location":"reference/api/#griffe2md","title":"griffe2md","text":"<p>griffe2md package.</p> <p>Output API docs to Markdown using Griffe.</p> <p>Modules:</p> <ul> <li> <code>cli</code>           \u2013            <p>Deprecated. Import from <code>griffe2md</code> directly.</p> </li> <li> <code>main</code>           \u2013            <p>Deprecated. Import from <code>griffe2md</code> directly.</p> </li> <li> <code>rendering</code>           \u2013            <p>Deprecated. Import from <code>griffe2md</code> directly.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>ConfigDict</code>           \u2013            <p>Configuration for griffe2md, griffe and mkdocstrings.</p> </li> <li> <code>Order</code>           \u2013            <p>Enumeration for the possible members ordering.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>do_any</code>             \u2013              <p>Check if at least one of the item in the sequence evaluates to true.</p> </li> <li> <code>do_as_attributes_section</code>             \u2013              <p>Build an attributes section from a list of attributes.</p> </li> <li> <code>do_as_classes_section</code>             \u2013              <p>Build a classes section from a list of classes.</p> </li> <li> <code>do_as_functions_section</code>             \u2013              <p>Build a functions section from a list of functions.</p> </li> <li> <code>do_as_modules_section</code>             \u2013              <p>Build a modules section from a list of modules.</p> </li> <li> <code>do_filter_objects</code>             \u2013              <p>Filter a dictionary of objects based on their docstrings.</p> </li> <li> <code>do_format_attribute</code>             \u2013              <p>Format an attribute using Black.</p> </li> <li> <code>do_format_code</code>             \u2013              <p>Format code using Black.</p> </li> <li> <code>do_format_signature</code>             \u2013              <p>Format a signature using Black.</p> </li> <li> <code>do_heading</code>             \u2013              <p>Render a Markdown heading.</p> </li> <li> <code>do_order_members</code>             \u2013              <p>Order members given an ordering method.</p> </li> <li> <code>do_split_path</code>             \u2013              <p>Split object paths for building cross-references.</p> </li> <li> <code>from_private_package</code>             \u2013              <p>Tell if an alias points to an object coming from a corresponding private package.</p> </li> <li> <code>get_parser</code>             \u2013              <p>Return the CLI argument parser.</p> </li> <li> <code>load_config</code>             \u2013              <p>Load the configuration if config file or config entry in pyproject.toml exists.</p> </li> <li> <code>prepare_context</code>             \u2013              <p>Prepare Jinja context.</p> </li> <li> <code>prepare_env</code>             \u2013              <p>Prepare Jinja environment.</p> </li> <li> <code>render_object_docs</code>             \u2013              <p>Render docs for a given object.</p> </li> <li> <code>render_package_docs</code>             \u2013              <p>Render docs for a given package.</p> </li> <li> <code>write_package_docs</code>             \u2013              <p>Write docs for a given package to a file or stdout.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>CONFIG_FILE_PATHS</code>           \u2013            <p>Paths to default configuration files.</p> </li> <li> <code>default_config</code>               (<code>ConfigDict</code>)           \u2013            <p>Default configuration values.</p> </li> <li> <code>order_map</code>           \u2013            <p>Order mapping for sorting objects.</p> </li> </ul>"},{"location":"reference/api/#griffe2md.CONFIG_FILE_PATHS","title":"CONFIG_FILE_PATHS  <code>module-attribute</code>","text":"<pre><code>CONFIG_FILE_PATHS = (\n    Path(\".config/griffe2md.toml\"),\n    Path(\"config/griffe2md.toml\"),\n    Path(\"pyproject.toml\"),\n)\n</code></pre> <p>Paths to default configuration files.</p>"},{"location":"reference/api/#griffe2md.default_config","title":"default_config  <code>module-attribute</code>","text":"<pre><code>default_config: ConfigDict = {\n    \"docstring_style\": \"google\",\n    \"docstring_options\": {\"ignore_init_summary\": True},\n    \"show_root_heading\": True,\n    \"show_root_full_path\": True,\n    \"show_root_members_full_path\": True,\n    \"show_object_full_path\": True,\n    \"show_category_heading\": False,\n    \"show_if_no_docstring\": True,\n    \"show_signature\": True,\n    \"show_signature_annotations\": False,\n    \"signature_crossrefs\": False,\n    \"separate_signature\": True,\n    \"line_length\": 80,\n    \"merge_init_into_class\": True,\n    \"show_docstring_attributes\": True,\n    \"show_docstring_description\": True,\n    \"show_docstring_examples\": True,\n    \"show_docstring_other_parameters\": True,\n    \"show_docstring_parameters\": True,\n    \"show_docstring_raises\": True,\n    \"show_docstring_receives\": True,\n    \"show_docstring_returns\": True,\n    \"show_docstring_warns\": True,\n    \"show_docstring_yields\": True,\n    \"show_bases\": True,\n    \"show_submodules\": True,\n    \"group_by_category\": False,\n    \"heading_level\": 2,\n    \"members_order\": \"alphabetical\",\n    \"docstring_section_style\": \"list\",\n    \"members\": None,\n    \"inherited_members\": True,\n    \"filters\": [\"!^_\"],\n    \"annotations_path\": \"brief\",\n    \"preload_modules\": None,\n    \"load_external_modules\": False,\n    \"allow_inspection\": True,\n    \"summary\": True,\n    \"show_docstring_classes\": True,\n    \"show_docstring_functions\": True,\n    \"show_docstring_modules\": True,\n}\n</code></pre> <p>Default configuration values.</p>"},{"location":"reference/api/#griffe2md.order_map","title":"order_map  <code>module-attribute</code>","text":"<pre><code>order_map = {\n    alphabetical.value: _sort_key_alphabetical,\n    source.value: _sort_key_source,\n}\n</code></pre> <p>Order mapping for sorting objects.</p>"},{"location":"reference/api/#griffe2md.ConfigDict","title":"ConfigDict","text":"<p>               Bases: <code>TypedDict</code></p> <p>Configuration for griffe2md, griffe and mkdocstrings.</p> Returned by: <ul> <li> <code></code>\u00a0griffe2md <code></code>\u00a0default_config </li> </ul> <p>Attributes:</p> <ul> <li> <code>allow_inspection</code>               (<code>bool</code>)           \u2013            <p>Allow using introspection on modules for which sources aren't available (compiled modules, etc.).</p> </li> <li> <code>annotations_path</code>               (<code>Literal['brief', 'source', 'full']</code>)           \u2013            <p>The verbosity for annotations path: <code>brief</code> (recommended), <code>source</code> (as written in the source), or <code>full</code>.</p> </li> <li> <code>docstring_options</code>               (<code>dict</code>)           \u2013            <p>mkdocstring configuration</p> </li> <li> <code>docstring_section_style</code>               (<code>Literal['list', 'table']</code>)           \u2013            <p>The style used to render docstring sections.</p> </li> <li> <code>docstring_style</code>               (<code>Literal['google', 'numpy', 'sphinx', 'auto'] | None</code>)           \u2013            <p>The style in which docstrings are written: <code>auto</code>, <code>google</code>, <code>numpy</code>, <code>sphinx</code>, or <code>None</code>.</p> </li> <li> <code>filters</code>               (<code>list[str] | list[tuple[Pattern[str], bool]]</code>)           \u2013            <p>A list of filters.</p> </li> <li> <code>group_by_category</code>               (<code>bool</code>)           \u2013            <p>Group the object's children by categories: attributes, classes, functions, and modules.</p> </li> <li> <code>heading_level</code>               (<code>int</code>)           \u2013            <p>The initial heading level to use.</p> </li> <li> <code>inherited_members</code>               (<code>bool | list[str]</code>)           \u2013            <p>A boolean, or an explicit list of inherited members to render.</p> </li> <li> <code>line_length</code>               (<code>int</code>)           \u2013            <p>Maximum line length when formatting code/signatures.</p> </li> <li> <code>load_external_modules</code>               (<code>bool</code>)           \u2013            <p>Whether to always load external modules/packages.</p> </li> <li> <code>members</code>               (<code>list[str] | bool | None</code>)           \u2013            <p>A boolean, or an explicit list of members to render.</p> </li> <li> <code>members_order</code>               (<code>Literal['alphabetical', 'source']</code>)           \u2013            <p>The members ordering to use.</p> </li> <li> <code>merge_init_into_class</code>               (<code>bool</code>)           \u2013            <p>Whether to merge the <code>__init__</code> method into the class' signature and docstring.</p> </li> <li> <code>preload_modules</code>               (<code>list[str] | None</code>)           \u2013            <p>Pre-load modules that are not specified directly in autodoc instructions (<code>::: identifier</code>).</p> </li> <li> <code>separate_signature</code>               (<code>bool</code>)           \u2013            <p>Whether to put the whole signature in a code block below the heading.</p> </li> <li> <code>show_bases</code>               (<code>bool</code>)           \u2013            <p>Show the base classes of a class.</p> </li> <li> <code>show_category_heading</code>               (<code>bool</code>)           \u2013            <p>When grouped by categories, show a heading for each category.</p> </li> <li> <code>show_docstring_attributes</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Attributes' section in the object's docstring.</p> </li> <li> <code>show_docstring_classes</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Classes' section in the object's docstring.</p> </li> <li> <code>show_docstring_description</code>               (<code>bool</code>)           \u2013            <p>Whether to display the textual block (including admonitions) in the object's docstring.</p> </li> <li> <code>show_docstring_examples</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Examples' section in the object's docstring.</p> </li> <li> <code>show_docstring_functions</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Functions' section in the object's docstring.</p> </li> <li> <code>show_docstring_modules</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Modules' section in the object's docstring.</p> </li> <li> <code>show_docstring_other_parameters</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Other Parameters' section in the object's docstring.</p> </li> <li> <code>show_docstring_parameters</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Parameters' section in the object's docstring.</p> </li> <li> <code>show_docstring_raises</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Raises' section in the object's docstring.</p> </li> <li> <code>show_docstring_receives</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Receives' section in the object's docstring.</p> </li> <li> <code>show_docstring_returns</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Returns' section in the object's docstring.</p> </li> <li> <code>show_docstring_warns</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Warns' section in the object's docstring.</p> </li> <li> <code>show_docstring_yields</code>               (<code>bool</code>)           \u2013            <p>Whether to display the 'Yields' section in the object's docstring.</p> </li> <li> <code>show_if_no_docstring</code>               (<code>bool</code>)           \u2013            <p>Show the object heading even if it has no docstring or children with docstrings.</p> </li> <li> <code>show_object_full_path</code>               (<code>bool</code>)           \u2013            <p>Show the full Python path of every object.</p> </li> <li> <code>show_root_full_path</code>               (<code>bool</code>)           \u2013            <p>Show the full Python path for the root object heading.</p> </li> <li> <code>show_root_heading</code>               (<code>bool</code>)           \u2013            <p>Show the heading of the object at the root of the documentation tree.</p> </li> <li> <code>show_root_members_full_path</code>               (<code>bool</code>)           \u2013            <p>Show the full Python path of the root members.</p> </li> <li> <code>show_signature</code>               (<code>bool</code>)           \u2013            <p>Show methods and functions signatures.</p> </li> <li> <code>show_signature_annotations</code>               (<code>bool</code>)           \u2013            <p>Show the type annotations in methods and functions signatures.</p> </li> <li> <code>show_submodules</code>               (<code>bool</code>)           \u2013            <p>When rendering a module, show its submodules recursively.</p> </li> <li> <code>signature_crossrefs</code>               (<code>bool</code>)           \u2013            <p>Whether to render cross-references for type annotations in signatures.</p> </li> <li> <code>summary</code>               (<code>bool | dict</code>)           \u2013            <p>Whether to render summaries of modules, classes, functions (methods) and attributes.</p> </li> </ul>"},{"location":"reference/api/#griffe2md.ConfigDict.allow_inspection","title":"allow_inspection  <code>instance-attribute</code>","text":"<pre><code>allow_inspection: bool\n</code></pre> <p>Allow using introspection on modules for which sources aren't available (compiled modules, etc.).</p>"},{"location":"reference/api/#griffe2md.ConfigDict.annotations_path","title":"annotations_path  <code>instance-attribute</code>","text":"<pre><code>annotations_path: Literal['brief', 'source', 'full']\n</code></pre> <p>The verbosity for annotations path: <code>brief</code> (recommended), <code>source</code> (as written in the source), or <code>full</code>.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.docstring_options","title":"docstring_options  <code>instance-attribute</code>","text":"<pre><code>docstring_options: dict\n</code></pre> <p>mkdocstring configuration</p>"},{"location":"reference/api/#griffe2md.ConfigDict.docstring_section_style","title":"docstring_section_style  <code>instance-attribute</code>","text":"<pre><code>docstring_section_style: Literal['list', 'table']\n</code></pre> <p>The style used to render docstring sections.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.docstring_style","title":"docstring_style  <code>instance-attribute</code>","text":"<pre><code>docstring_style: (\n    Literal[\"google\", \"numpy\", \"sphinx\", \"auto\"] | None\n)\n</code></pre> <p>The style in which docstrings are written: <code>auto</code>, <code>google</code>, <code>numpy</code>, <code>sphinx</code>, or <code>None</code>.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.filters","title":"filters  <code>instance-attribute</code>","text":"<pre><code>filters: list[str] | list[tuple[Pattern[str], bool]]\n</code></pre> <p>A list of filters.</p> <p>A filter starting with <code>!</code> will exclude matching objects instead of including them. The <code>members</code> option takes precedence over <code>filters</code> (filters will still be applied recursively to lower members in the hierarchy).</p>"},{"location":"reference/api/#griffe2md.ConfigDict.group_by_category","title":"group_by_category  <code>instance-attribute</code>","text":"<pre><code>group_by_category: bool\n</code></pre> <p>Group the object's children by categories: attributes, classes, functions, and modules.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.heading_level","title":"heading_level  <code>instance-attribute</code>","text":"<pre><code>heading_level: int\n</code></pre> <p>The initial heading level to use.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.inherited_members","title":"inherited_members  <code>instance-attribute</code>","text":"<pre><code>inherited_members: bool | list[str]\n</code></pre> <p>A boolean, or an explicit list of inherited members to render.</p> <p>If true, select all inherited members, which can then be filtered with <code>members</code>. If false or empty list, do not select any inherited member.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.line_length","title":"line_length  <code>instance-attribute</code>","text":"<pre><code>line_length: int\n</code></pre> <p>Maximum line length when formatting code/signatures.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.load_external_modules","title":"load_external_modules  <code>instance-attribute</code>","text":"<pre><code>load_external_modules: bool\n</code></pre> <p>Whether to always load external modules/packages.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.members","title":"members  <code>instance-attribute</code>","text":"<pre><code>members: list[str] | bool | None\n</code></pre> <p>A boolean, or an explicit list of members to render.</p> <p>If true, select all members without further filtering. If false or empty list, do not render members. If none, select all members and apply further filtering with filters and docstrings.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.members_order","title":"members_order  <code>instance-attribute</code>","text":"<pre><code>members_order: Literal['alphabetical', 'source']\n</code></pre> <p>The members ordering to use.</p> <ul> <li><code>alphabetical</code>: order members alphabetically;</li> <li><code>source</code>: order members as they appear in the source file.</li> </ul>"},{"location":"reference/api/#griffe2md.ConfigDict.merge_init_into_class","title":"merge_init_into_class  <code>instance-attribute</code>","text":"<pre><code>merge_init_into_class: bool\n</code></pre> <p>Whether to merge the <code>__init__</code> method into the class' signature and docstring.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.preload_modules","title":"preload_modules  <code>instance-attribute</code>","text":"<pre><code>preload_modules: list[str] | None\n</code></pre> <p>Pre-load modules that are not specified directly in autodoc instructions (<code>::: identifier</code>).</p> <p>It is useful when you want to render documentation for a particular member of an object, and this member is imported from another package than its parent.</p> <p>For an imported member to be rendered, you need to add it to the <code>__all__</code> attribute of the importing module.</p> <p>The modules must be listed as an array of strings.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.separate_signature","title":"separate_signature  <code>instance-attribute</code>","text":"<pre><code>separate_signature: bool\n</code></pre> <p>Whether to put the whole signature in a code block below the heading.</p> <p>If Black or Ruff are installed, the signature is also formatted using them.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_bases","title":"show_bases  <code>instance-attribute</code>","text":"<pre><code>show_bases: bool\n</code></pre> <p>Show the base classes of a class.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_category_heading","title":"show_category_heading  <code>instance-attribute</code>","text":"<pre><code>show_category_heading: bool\n</code></pre> <p>When grouped by categories, show a heading for each category.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_docstring_attributes","title":"show_docstring_attributes  <code>instance-attribute</code>","text":"<pre><code>show_docstring_attributes: bool\n</code></pre> <p>Whether to display the 'Attributes' section in the object's docstring.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_docstring_classes","title":"show_docstring_classes  <code>instance-attribute</code>","text":"<pre><code>show_docstring_classes: bool\n</code></pre> <p>Whether to display the 'Classes' section in the object's docstring.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_docstring_description","title":"show_docstring_description  <code>instance-attribute</code>","text":"<pre><code>show_docstring_description: bool\n</code></pre> <p>Whether to display the textual block (including admonitions) in the object's docstring.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_docstring_examples","title":"show_docstring_examples  <code>instance-attribute</code>","text":"<pre><code>show_docstring_examples: bool\n</code></pre> <p>Whether to display the 'Examples' section in the object's docstring.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_docstring_functions","title":"show_docstring_functions  <code>instance-attribute</code>","text":"<pre><code>show_docstring_functions: bool\n</code></pre> <p>Whether to display the 'Functions' section in the object's docstring.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_docstring_modules","title":"show_docstring_modules  <code>instance-attribute</code>","text":"<pre><code>show_docstring_modules: bool\n</code></pre> <p>Whether to display the 'Modules' section in the object's docstring.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_docstring_other_parameters","title":"show_docstring_other_parameters  <code>instance-attribute</code>","text":"<pre><code>show_docstring_other_parameters: bool\n</code></pre> <p>Whether to display the 'Other Parameters' section in the object's docstring.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_docstring_parameters","title":"show_docstring_parameters  <code>instance-attribute</code>","text":"<pre><code>show_docstring_parameters: bool\n</code></pre> <p>Whether to display the 'Parameters' section in the object's docstring.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_docstring_raises","title":"show_docstring_raises  <code>instance-attribute</code>","text":"<pre><code>show_docstring_raises: bool\n</code></pre> <p>Whether to display the 'Raises' section in the object's docstring.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_docstring_receives","title":"show_docstring_receives  <code>instance-attribute</code>","text":"<pre><code>show_docstring_receives: bool\n</code></pre> <p>Whether to display the 'Receives' section in the object's docstring.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_docstring_returns","title":"show_docstring_returns  <code>instance-attribute</code>","text":"<pre><code>show_docstring_returns: bool\n</code></pre> <p>Whether to display the 'Returns' section in the object's docstring.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_docstring_warns","title":"show_docstring_warns  <code>instance-attribute</code>","text":"<pre><code>show_docstring_warns: bool\n</code></pre> <p>Whether to display the 'Warns' section in the object's docstring.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_docstring_yields","title":"show_docstring_yields  <code>instance-attribute</code>","text":"<pre><code>show_docstring_yields: bool\n</code></pre> <p>Whether to display the 'Yields' section in the object's docstring.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_if_no_docstring","title":"show_if_no_docstring  <code>instance-attribute</code>","text":"<pre><code>show_if_no_docstring: bool\n</code></pre> <p>Show the object heading even if it has no docstring or children with docstrings.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_object_full_path","title":"show_object_full_path  <code>instance-attribute</code>","text":"<pre><code>show_object_full_path: bool\n</code></pre> <p>Show the full Python path of every object.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_root_full_path","title":"show_root_full_path  <code>instance-attribute</code>","text":"<pre><code>show_root_full_path: bool\n</code></pre> <p>Show the full Python path for the root object heading.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_root_heading","title":"show_root_heading  <code>instance-attribute</code>","text":"<pre><code>show_root_heading: bool\n</code></pre> <p>Show the heading of the object at the root of the documentation tree.</p> <p>The root object is the object referenced by the identifier after <code>:::</code>.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_root_members_full_path","title":"show_root_members_full_path  <code>instance-attribute</code>","text":"<pre><code>show_root_members_full_path: bool\n</code></pre> <p>Show the full Python path of the root members.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_signature","title":"show_signature  <code>instance-attribute</code>","text":"<pre><code>show_signature: bool\n</code></pre> <p>Show methods and functions signatures.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_signature_annotations","title":"show_signature_annotations  <code>instance-attribute</code>","text":"<pre><code>show_signature_annotations: bool\n</code></pre> <p>Show the type annotations in methods and functions signatures.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.show_submodules","title":"show_submodules  <code>instance-attribute</code>","text":"<pre><code>show_submodules: bool\n</code></pre> <p>When rendering a module, show its submodules recursively.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.signature_crossrefs","title":"signature_crossrefs  <code>instance-attribute</code>","text":"<pre><code>signature_crossrefs: bool\n</code></pre> <p>Whether to render cross-references for type annotations in signatures.</p>"},{"location":"reference/api/#griffe2md.ConfigDict.summary","title":"summary  <code>instance-attribute</code>","text":"<pre><code>summary: bool | dict\n</code></pre> <p>Whether to render summaries of modules, classes, functions (methods) and attributes.</p>"},{"location":"reference/api/#griffe2md.Order","title":"Order","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration for the possible members ordering.</p> Used by: <ul> <li> <code></code>\u00a0griffe2md <code></code>\u00a0do_order_members </li> </ul> <p>Attributes:</p> <ul> <li> <code>alphabetical</code>           \u2013            <p>Alphabetical order.</p> </li> <li> <code>source</code>           \u2013            <p>Source code order.</p> </li> </ul>"},{"location":"reference/api/#griffe2md.Order.alphabetical","title":"alphabetical  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>alphabetical = 'alphabetical'\n</code></pre> <p>Alphabetical order.</p>"},{"location":"reference/api/#griffe2md.Order.source","title":"source  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source = 'source'\n</code></pre> <p>Source code order.</p>"},{"location":"reference/api/#griffe2md.do_any","title":"do_any","text":"<pre><code>do_any(seq: Sequence, attribute: str | None = None) -&gt; bool\n</code></pre> <p>Check if at least one of the item in the sequence evaluates to true.</p> <p>The <code>any</code> builtin as a filter for Jinja templates.</p> <p>Parameters:</p> <ul> <li> <code>seq</code>               (<code>Sequence</code>)           \u2013            <p>An iterable object.</p> </li> <li> <code>attribute</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The attribute name to use on each object of the iterable.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>A boolean telling if any object of the iterable evaluated to True.</p> </li> </ul> Source code in <code>src/griffe2md/_internal/rendering.py</code> <pre><code>def do_any(seq: Sequence, attribute: str | None = None) -&gt; bool:\n    \"\"\"Check if at least one of the item in the sequence evaluates to true.\n\n    The `any` builtin as a filter for Jinja templates.\n\n    Arguments:\n        seq: An iterable object.\n        attribute: The attribute name to use on each object of the iterable.\n\n    Returns:\n        A boolean telling if any object of the iterable evaluated to True.\n    \"\"\"\n    if attribute is None:\n        return any(seq)\n    return any(_[attribute] for _ in seq)\n</code></pre>"},{"location":"reference/api/#griffe2md.do_as_attributes_section","title":"do_as_attributes_section","text":"<pre><code>do_as_attributes_section(\n    attributes: Sequence[Attribute],\n    *,\n    check_public: bool = True,\n) -&gt; DocstringSectionAttributes\n</code></pre> <p>Build an attributes section from a list of attributes.</p> <p>Parameters:</p> <ul> <li> <code>attributes</code>               (<code>Sequence[Attribute]</code>)           \u2013            <p>The attributes to build the section from.</p> </li> <li> <code>check_public</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to check if the attribute is public.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DocstringSectionAttributes</code>           \u2013            <p>An attributes docstring section.</p> </li> </ul> Source code in <code>src/griffe2md/_internal/rendering.py</code> <pre><code>def do_as_attributes_section(\n    attributes: Sequence[Attribute],\n    *,\n    check_public: bool = True,\n) -&gt; DocstringSectionAttributes:\n    \"\"\"Build an attributes section from a list of attributes.\n\n    Parameters:\n        attributes: The attributes to build the section from.\n        check_public: Whether to check if the attribute is public.\n\n    Returns:\n        An attributes docstring section.\n    \"\"\"\n    return DocstringSectionAttributes(\n        [\n            DocstringAttribute(\n                name=attribute.name,\n                description=attribute.docstring.value.split(\"\\n\", 1)[0] if attribute.docstring else \"\",\n                annotation=attribute.annotation,\n                value=str(attribute.value) if attribute.value else None,\n            )\n            for attribute in attributes\n            if not check_public or attribute.is_public or from_private_package(attribute)\n        ],\n    )\n</code></pre>"},{"location":"reference/api/#griffe2md.do_as_classes_section","title":"do_as_classes_section","text":"<pre><code>do_as_classes_section(\n    classes: Sequence[Class], *, check_public: bool = True\n) -&gt; DocstringSectionClasses\n</code></pre> <p>Build a classes section from a list of classes.</p> <p>Parameters:</p> <ul> <li> <code>classes</code>               (<code>Sequence[Class]</code>)           \u2013            <p>The classes to build the section from.</p> </li> <li> <code>check_public</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to check if the class is public.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DocstringSectionClasses</code>           \u2013            <p>A classes docstring section.</p> </li> </ul> Source code in <code>src/griffe2md/_internal/rendering.py</code> <pre><code>def do_as_classes_section(classes: Sequence[Class], *, check_public: bool = True) -&gt; DocstringSectionClasses:\n    \"\"\"Build a classes section from a list of classes.\n\n    Parameters:\n        classes: The classes to build the section from.\n        check_public: Whether to check if the class is public.\n\n    Returns:\n        A classes docstring section.\n    \"\"\"\n    return DocstringSectionClasses(\n        [\n            DocstringClass(\n                name=cls.name,\n                description=cls.docstring.value.split(\"\\n\", 1)[0] if cls.docstring else \"\",\n            )\n            for cls in classes\n            if not check_public or cls.is_public or from_private_package(cls)\n        ],\n    )\n</code></pre>"},{"location":"reference/api/#griffe2md.do_as_functions_section","title":"do_as_functions_section","text":"<pre><code>do_as_functions_section(\n    functions: Sequence[Function],\n    *,\n    check_public: bool = True,\n) -&gt; DocstringSectionFunctions\n</code></pre> <p>Build a functions section from a list of functions.</p> <p>Parameters:</p> <ul> <li> <code>functions</code>               (<code>Sequence[Function]</code>)           \u2013            <p>The functions to build the section from.</p> </li> <li> <code>check_public</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to check if the function is public.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DocstringSectionFunctions</code>           \u2013            <p>A functions docstring section.</p> </li> </ul> Source code in <code>src/griffe2md/_internal/rendering.py</code> <pre><code>def do_as_functions_section(functions: Sequence[Function], *, check_public: bool = True) -&gt; DocstringSectionFunctions:\n    \"\"\"Build a functions section from a list of functions.\n\n    Parameters:\n        functions: The functions to build the section from.\n        check_public: Whether to check if the function is public.\n\n    Returns:\n        A functions docstring section.\n    \"\"\"\n    return DocstringSectionFunctions(\n        [\n            DocstringFunction(\n                name=function.name,\n                description=function.docstring.value.split(\"\\n\", 1)[0] if function.docstring else \"\",\n            )\n            for function in functions\n            if not check_public or function.is_public or from_private_package(function)\n        ],\n    )\n</code></pre>"},{"location":"reference/api/#griffe2md.do_as_modules_section","title":"do_as_modules_section","text":"<pre><code>do_as_modules_section(\n    modules: Sequence[Module], *, check_public: bool = True\n) -&gt; DocstringSectionModules\n</code></pre> <p>Build a modules section from a list of modules.</p> <p>Parameters:</p> <ul> <li> <code>modules</code>               (<code>Sequence[Module]</code>)           \u2013            <p>The modules to build the section from.</p> </li> <li> <code>check_public</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to check if the module is public.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DocstringSectionModules</code>           \u2013            <p>A modules docstring section.</p> </li> </ul> Source code in <code>src/griffe2md/_internal/rendering.py</code> <pre><code>def do_as_modules_section(modules: Sequence[Module], *, check_public: bool = True) -&gt; DocstringSectionModules:\n    \"\"\"Build a modules section from a list of modules.\n\n    Parameters:\n        modules: The modules to build the section from.\n        check_public: Whether to check if the module is public.\n\n    Returns:\n        A modules docstring section.\n    \"\"\"\n    return DocstringSectionModules(\n        [\n            DocstringModule(\n                name=module.name,\n                description=module.docstring.value.split(\"\\n\", 1)[0] if module.docstring else \"\",\n            )\n            for module in modules\n            if not check_public or module.is_public or from_private_package(module)\n        ],\n    )\n</code></pre>"},{"location":"reference/api/#griffe2md.do_filter_objects","title":"do_filter_objects","text":"<pre><code>do_filter_objects(\n    objects_dictionary: dict[str, Object | Alias],\n    *,\n    filters: Sequence[tuple[Pattern, bool]] | None = None,\n    members_list: bool | list[str] | None = None,\n    inherited_members: bool | list[str] = False,\n    keep_no_docstrings: bool = True,\n) -&gt; list[Object | Alias]\n</code></pre> <p>Filter a dictionary of objects based on their docstrings.</p> <p>Parameters:</p> <ul> <li> <code>objects_dictionary</code>               (<code>dict[str, Object | Alias]</code>)           \u2013            <p>The dictionary of objects.</p> </li> <li> <code>filters</code>               (<code>Sequence[tuple[Pattern, bool]] | None</code>, default:                   <code>None</code> )           \u2013            <p>Filters to apply, based on members' names. Each element is a tuple: a pattern, and a boolean indicating whether to reject the object if the pattern matches.</p> </li> <li> <code>members_list</code>               (<code>bool | list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional, explicit list of members to keep. When given and empty, return an empty list. When given and not empty, ignore filters and docstrings presence/absence.</p> </li> <li> <code>inherited_members</code>               (<code>bool | list[str]</code>, default:                   <code>False</code> )           \u2013            <p>Whether to keep inherited members or exclude them.</p> </li> <li> <code>keep_no_docstrings</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to keep objects with no/empty docstrings (recursive check).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Object | Alias]</code>           \u2013            <p>A list of objects.</p> </li> </ul> Source code in <code>src/griffe2md/_internal/rendering.py</code> <pre><code>def do_filter_objects(\n    objects_dictionary: dict[str, Object | Alias],\n    *,\n    filters: Sequence[tuple[Pattern, bool]] | None = None,\n    members_list: bool | list[str] | None = None,\n    inherited_members: bool | list[str] = False,\n    keep_no_docstrings: bool = True,\n) -&gt; list[Object | Alias]:\n    \"\"\"Filter a dictionary of objects based on their docstrings.\n\n    Parameters:\n        objects_dictionary: The dictionary of objects.\n        filters: Filters to apply, based on members' names.\n            Each element is a tuple: a pattern, and a boolean indicating whether\n            to reject the object if the pattern matches.\n        members_list: An optional, explicit list of members to keep.\n            When given and empty, return an empty list.\n            When given and not empty, ignore filters and docstrings presence/absence.\n        inherited_members: Whether to keep inherited members or exclude them.\n        keep_no_docstrings: Whether to keep objects with no/empty docstrings (recursive check).\n\n    Returns:\n        A list of objects.\n    \"\"\"\n    inherited_members_specified = False\n    if inherited_members is True:\n        # Include all inherited members.\n        objects = list(objects_dictionary.values())\n    elif inherited_members is False:\n        # Include no inherited members.\n        objects = [obj for obj in objects_dictionary.values() if not obj.inherited]\n    else:\n        # Include specific inherited members.\n        inherited_members_specified = True\n        objects = [\n            obj for obj in objects_dictionary.values() if not obj.inherited or obj.name in set(inherited_members)\n        ]\n\n    if members_list is True:\n        # Return all pre-selected members.\n        return objects\n\n    if members_list is False or members_list == []:\n        # Return selected inherited members, if any.\n        return [obj for obj in objects if obj.inherited]\n\n    if members_list is not None:\n        # Return selected members (keeping any pre-selected inherited members).\n        return [\n            obj for obj in objects if obj.name in set(members_list) or (inherited_members_specified and obj.inherited)\n        ]\n\n    # Use filters and docstrings.\n    if filters:\n        objects = [\n            obj for obj in objects if _keep_object(obj.name, filters) or (inherited_members_specified and obj.inherited)\n        ]\n    if keep_no_docstrings:\n        return objects\n\n    return [obj for obj in objects if obj.has_docstrings or (inherited_members_specified and obj.inherited)]\n</code></pre>"},{"location":"reference/api/#griffe2md.do_format_attribute","title":"do_format_attribute","text":"<pre><code>do_format_attribute(\n    context: Context,\n    attribute_path: Markup,\n    attribute: Attribute,\n    line_length: int,\n    *,\n    crossrefs: bool = False,\n) -&gt; str\n</code></pre> <p>Format an attribute using Black.</p> <p>Parameters:</p> <ul> <li> <code>context</code>               (<code>Context</code>)           \u2013            <p>Jinja context, passed automatically.</p> </li> <li> <code>attribute_path</code>               (<code>Markup</code>)           \u2013            <p>The path of the callable we render the signature of.</p> </li> <li> <code>attribute</code>               (<code>Attribute</code>)           \u2013            <p>The attribute we render the signature of.</p> </li> <li> <code>line_length</code>               (<code>int</code>)           \u2013            <p>The line length to give to Black.</p> </li> <li> <code>crossrefs</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to cross-reference types in the signature.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The same code, formatted.</p> </li> </ul> Source code in <code>src/griffe2md/_internal/rendering.py</code> <pre><code>@pass_context\ndef do_format_attribute(\n    context: Context,\n    attribute_path: Markup,\n    attribute: Attribute,\n    line_length: int,\n    *,\n    crossrefs: bool = False,\n) -&gt; str:\n    \"\"\"Format an attribute using Black.\n\n    Parameters:\n        context: Jinja context, passed automatically.\n        attribute_path: The path of the callable we render the signature of.\n        attribute: The attribute we render the signature of.\n        line_length: The line length to give to Black.\n        crossrefs: Whether to cross-reference types in the signature.\n\n    Returns:\n        The same code, formatted.\n    \"\"\"\n    env = context.environment\n    template = env.get_template(\"expression.md.jinja\")\n    annotations = context.parent[\"config\"][\"show_signature_annotations\"]\n    separate_signature = context.parent[\"config\"][\"separate_signature\"]\n    old_stash_ref_filter = env.filters[\"stash_crossref\"]\n\n    stash: dict[str, str] = {}\n    if separate_signature and crossrefs:\n        env.filters[\"stash_crossref\"] = partial(_stash_crossref, stash)\n\n    try:\n        signature = str(attribute_path).strip()\n        if annotations and attribute.annotation:\n            annotation = template.render(context.parent, expression=attribute.annotation, signature=True)\n            signature += f\": {annotation}\"\n        if attribute.value:\n            value = template.render(context.parent, expression=attribute.value, signature=True)\n            signature += f\" = {value}\"\n    finally:\n        env.filters[\"stash_crossref\"] = old_stash_ref_filter\n\n    signature = do_format_code(signature, line_length)\n\n    if stash:\n        for key, value in stash.items():\n            signature = re.sub(rf\"\\b{key}\\b\", value, signature)\n\n    return signature\n</code></pre>"},{"location":"reference/api/#griffe2md.do_format_code","title":"do_format_code","text":"<pre><code>do_format_code(code: str, line_length: int) -&gt; str\n</code></pre> <p>Format code using Black.</p> <p>Parameters:</p> <ul> <li> <code>code</code>               (<code>str</code>)           \u2013            <p>The code to format.</p> </li> <li> <code>line_length</code>               (<code>int</code>)           \u2013            <p>The line length to give to Black.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The same code, formatted.</p> </li> </ul> Source code in <code>src/griffe2md/_internal/rendering.py</code> <pre><code>def do_format_code(code: str, line_length: int) -&gt; str:\n    \"\"\"Format code using Black.\n\n    Parameters:\n        code: The code to format.\n        line_length: The line length to give to Black.\n\n    Returns:\n        The same code, formatted.\n    \"\"\"\n    code = code.strip()\n    if len(code) &lt; line_length:\n        return code\n    formatter = _get_black_formatter()\n    return formatter(code, line_length)\n</code></pre>"},{"location":"reference/api/#griffe2md.do_format_signature","title":"do_format_signature","text":"<pre><code>do_format_signature(\n    context: Context,\n    callable_path: Markup,\n    function: Function,\n    line_length: int,\n    *,\n    annotations: bool | None = None,\n    crossrefs: bool = False,\n) -&gt; str\n</code></pre> <p>Format a signature using Black.</p> <p>Parameters:</p> <ul> <li> <code>context</code>               (<code>Context</code>)           \u2013            <p>Jinja context, passed automatically.</p> </li> <li> <code>callable_path</code>               (<code>Markup</code>)           \u2013            <p>The path of the callable we render the signature of.</p> </li> <li> <code>function</code>               (<code>Function</code>)           \u2013            <p>The function we render the signature of.</p> </li> <li> <code>line_length</code>               (<code>int</code>)           \u2013            <p>The line length to give to Black.</p> </li> <li> <code>annotations</code>               (<code>bool | None</code>, default:                   <code>None</code> )           \u2013            <p>Whether to show type annotations.</p> </li> <li> <code>crossrefs</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to cross-reference types in the signature.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The same code, formatted.</p> </li> </ul> Source code in <code>src/griffe2md/_internal/rendering.py</code> <pre><code>@pass_context\ndef do_format_signature(\n    context: Context,\n    callable_path: Markup,\n    function: Function,\n    line_length: int,\n    *,\n    annotations: bool | None = None,\n    crossrefs: bool = False,\n) -&gt; str:\n    \"\"\"Format a signature using Black.\n\n    Parameters:\n        context: Jinja context, passed automatically.\n        callable_path: The path of the callable we render the signature of.\n        function: The function we render the signature of.\n        line_length: The line length to give to Black.\n        annotations: Whether to show type annotations.\n        crossrefs: Whether to cross-reference types in the signature.\n\n    Returns:\n        The same code, formatted.\n    \"\"\"\n    env = context.environment\n    template = env.get_template(\"signature.md.jinja\")\n    config_annotations = context.parent[\"config\"][\"show_signature_annotations\"]\n    old_stash_ref_filter = env.filters[\"stash_crossref\"]\n\n    stash: dict[str, str] = {}\n    if (annotations or config_annotations) and crossrefs:\n        env.filters[\"stash_crossref\"] = partial(_stash_crossref, stash)\n\n    if annotations is None:\n        new_context = context.parent\n    else:\n        new_context = dict(context.parent)\n        new_context[\"config\"] = dict(new_context[\"config\"])\n        new_context[\"config\"][\"show_signature_annotations\"] = annotations\n    try:\n        signature = template.render(new_context, function=function, signature=True)\n    finally:\n        env.filters[\"stash_crossref\"] = old_stash_ref_filter\n\n    signature = _format_signature(callable_path, signature, line_length)\n\n    if stash:\n        for key, value in stash.items():\n            signature = re.sub(rf\"\\b{key}\\b\", value, signature)\n\n    return signature\n</code></pre>"},{"location":"reference/api/#griffe2md.do_heading","title":"do_heading","text":"<pre><code>do_heading(content: str, heading_level: int) -&gt; str\n</code></pre> <p>Render a Markdown heading.</p> Source code in <code>src/griffe2md/_internal/rendering.py</code> <pre><code>def do_heading(content: str, heading_level: int) -&gt; str:\n    \"\"\"Render a Markdown heading.\"\"\"\n    return f\"\\n{'#' * heading_level} {content}\\n\\n\"\n</code></pre>"},{"location":"reference/api/#griffe2md.do_order_members","title":"do_order_members","text":"<pre><code>do_order_members(\n    members: Sequence[Object | Alias],\n    order: Order,\n    members_list: bool | list[str] | None,\n) -&gt; Sequence[Object | Alias]\n</code></pre> <p>Order members given an ordering method.</p> <p>Parameters:</p> <ul> <li> <code>members</code>               (<code>Sequence[Object | Alias]</code>)           \u2013            <p>The members to order.</p> </li> <li> <code>order</code>               (<code>Order</code>)           \u2013            <p>The ordering method.</p> </li> <li> <code>members_list</code>               (<code>bool | list[str] | None</code>)           \u2013            <p>An optional member list (manual ordering).</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Sequence[Object | Alias]</code>           \u2013            <p>The same members, ordered.</p> </li> </ul> Source code in <code>src/griffe2md/_internal/rendering.py</code> <pre><code>def do_order_members(\n    members: Sequence[Object | Alias],\n    order: Order,\n    members_list: bool | list[str] | None,  # noqa: FBT001\n) -&gt; Sequence[Object | Alias]:\n    \"\"\"Order members given an ordering method.\n\n    Parameters:\n        members: The members to order.\n        order: The ordering method.\n        members_list: An optional member list (manual ordering).\n\n    Returns:\n        The same members, ordered.\n    \"\"\"\n    if isinstance(members_list, list) and members_list:\n        sorted_members = []\n        members_dict = {member.name: member for member in members}\n        for name in members_list:\n            if name in members_dict:\n                sorted_members.append(members_dict[name])\n        return sorted_members\n    return sorted(members, key=order_map[order])\n</code></pre>"},{"location":"reference/api/#griffe2md.do_split_path","title":"do_split_path","text":"<pre><code>do_split_path(\n    path: str, full_path: str\n) -&gt; list[tuple[str, str]]\n</code></pre> <p>Split object paths for building cross-references.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>The path to split.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[tuple[str, str]]</code>           \u2013            <p>A list of pairs (title, full path).</p> </li> </ul> Source code in <code>src/griffe2md/_internal/rendering.py</code> <pre><code>def do_split_path(path: str, full_path: str) -&gt; list[tuple[str, str]]:\n    \"\"\"Split object paths for building cross-references.\n\n    Parameters:\n        path: The path to split.\n\n    Returns:\n        A list of pairs (title, full path).\n    \"\"\"\n    if \".\" not in path:\n        return [(path, full_path)]\n    pairs = []\n    full_path = \"\"\n    for part in path.split(\".\"):\n        if full_path:\n            full_path += f\".{part}\"\n        else:\n            full_path = part\n        pairs.append((part, full_path))\n    return pairs\n</code></pre>"},{"location":"reference/api/#griffe2md.from_private_package","title":"from_private_package","text":"<pre><code>from_private_package(obj: Object | Alias) -&gt; bool\n</code></pre> <p>Tell if an alias points to an object coming from a corresponding private package.</p> <p>For example, return true for an alias in package <code>ast</code> pointing at an object in package <code>_ast</code>.</p> <p>Parameters:</p> <ul> <li> <code>obj</code>               (<code>Object | Alias</code>)           \u2013            <p>The object (alias) to check.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True or false.</p> </li> </ul> Source code in <code>src/griffe2md/_internal/rendering.py</code> <pre><code>def from_private_package(obj: Object | Alias) -&gt; bool:\n    \"\"\"Tell if an alias points to an object coming from a corresponding private package.\n\n    For example, return true for an alias in package `ast` pointing at an object in package `_ast`.\n\n    Parameters:\n        obj: The object (alias) to check.\n\n    Returns:\n        True or false.\n    \"\"\"\n    if not obj.is_alias:\n        return False\n    try:\n        return obj.target.package.name == f\"_{obj.parent.package.name}\"  # type: ignore[union-attr]\n    except (AliasResolutionError, CyclicAliasError):\n        return False\n</code></pre>"},{"location":"reference/api/#griffe2md.get_parser","title":"get_parser","text":"<pre><code>get_parser() -&gt; ArgumentParser\n</code></pre> <p>Return the CLI argument parser.</p> <p>Returns:</p> <ul> <li> <code>ArgumentParser</code>           \u2013            <p>An argparse parser.</p> </li> </ul> Source code in <code>src/griffe2md/_internal/cli.py</code> <pre><code>def get_parser() -&gt; argparse.ArgumentParser:\n    \"\"\"Return the CLI argument parser.\n\n    Returns:\n        An argparse parser.\n    \"\"\"\n    parser = argparse.ArgumentParser(prog=\"griffe2md\")\n    parser.add_argument(\"package\", help=\"The package to output Markdown docs for.\")\n    parser.add_argument(\"-o\", \"--output\", default=None, help=\"File to write to. Default: stdout.\")\n    parser.add_argument(\"-V\", \"--version\", action=\"version\", version=f\"%(prog)s {debug._get_version()}\")\n    parser.add_argument(\"--debug-info\", action=_DebugInfo, help=\"Print debug information.\")\n    return parser\n</code></pre>"},{"location":"reference/api/#griffe2md.load_config","title":"load_config","text":"<pre><code>load_config() -&gt; ConfigDict | None\n</code></pre> <p>Load the configuration if config file or config entry in pyproject.toml exists.</p> <p>If neither config file was found or pyproject.toml file doesn't have a <code>[tool.griffe2md]</code> section, None is returned.</p> Source code in <code>src/griffe2md/_internal/config.py</code> <pre><code>def load_config() -&gt; ConfigDict | None:\n    \"\"\"Load the configuration if config file or config entry in pyproject.toml exists.\n\n    If neither config file was found or pyproject.toml file doesn't have\n    a `[tool.griffe2md]` section, None is returned.\n    \"\"\"\n    if not (config_path := _locate_config_file()):\n        return None\n\n    _logger.debug(\"Loading config from %s\", config_path)\n\n    with config_path.open(\"rb\") as f:\n        config = tomllib.load(f)\n\n    if config_path.name == \"pyproject.toml\":\n        return config.get(\"tool\", {}).get(\"griffe2md\", None)\n    return cast(\"ConfigDict\", config)\n</code></pre>"},{"location":"reference/api/#griffe2md.prepare_context","title":"prepare_context","text":"<pre><code>prepare_context(\n    obj: Object, config: ConfigDict | None = None\n) -&gt; dict\n</code></pre> <p>Prepare Jinja context.</p> <p>Parameters:</p> <ul> <li> <code>obj</code>               (<code>Object</code>)           \u2013            <p>A Griffe object.</p> </li> <li> <code>config</code>               (<code>ConfigDict | None</code>, default:                   <code>None</code> )           \u2013            <p>The configuration options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The Jinja context.</p> </li> </ul> Source code in <code>src/griffe2md/_internal/main.py</code> <pre><code>def prepare_context(obj: Object, config: ConfigDict | None = None) -&gt; dict:\n    \"\"\"Prepare Jinja context.\n\n    Parameters:\n        obj: A Griffe object.\n        config: The configuration options.\n\n    Returns:\n        The Jinja context.\n    \"\"\"\n    config = cast(\"ConfigDict\", {**default_config, **(config or {})})\n    if config[\"filters\"]:\n        config[\"filters\"] = [\n            (re.compile(filtr.lstrip(\"!\")), filtr.startswith(\"!\")) if isinstance(filtr, str) else filtr\n            for filtr in config[\"filters\"]\n        ]\n\n    heading_level = config[\"heading_level\"]\n    try:\n        config[\"members_order\"] = rendering.Order(config[\"members_order\"]).value\n    except ValueError as error:\n        choices = \"', '\".join(item.value for item in rendering.Order)\n        raise ValueError(\n            f\"Unknown members_order '{config['members_order']}', choose between '{choices}'.\",\n        ) from error\n\n    summary = config[\"summary\"]\n    if summary is True:\n        config[\"summary\"] = {\n            \"attributes\": True,\n            \"functions\": True,\n            \"classes\": True,\n            \"modules\": True,\n        }\n    elif summary is False:\n        config[\"summary\"] = {\n            \"attributes\": False,\n            \"functions\": False,\n            \"classes\": False,\n            \"modules\": False,\n        }\n    else:\n        config[\"summary\"] = {\n            \"attributes\": summary.get(\"attributes\", False),\n            \"functions\": summary.get(\"functions\", False),\n            \"classes\": summary.get(\"classes\", False),\n            \"modules\": summary.get(\"modules\", False),\n        }\n\n    return {\n        \"config\": config,\n        obj.kind.value: obj,\n        \"heading_level\": heading_level,\n        \"root\": True,\n    }\n</code></pre>"},{"location":"reference/api/#griffe2md.prepare_env","title":"prepare_env","text":"<pre><code>prepare_env(env: Environment | None = None) -&gt; Environment\n</code></pre> <p>Prepare Jinja environment.</p> <p>Parameters:</p> <ul> <li> <code>env</code>               (<code>Environment | None</code>, default:                   <code>None</code> )           \u2013            <p>A Jinja environment.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Environment</code>           \u2013            <p>The Jinja environment.</p> </li> </ul> Source code in <code>src/griffe2md/_internal/main.py</code> <pre><code>def prepare_env(env: Environment | None = None) -&gt; Environment:\n    \"\"\"Prepare Jinja environment.\n\n    Parameters:\n        env: A Jinja environment.\n\n    Returns:\n        The Jinja environment.\n    \"\"\"\n    env = env or Environment(\n        autoescape=False,  # noqa: S701\n        loader=FileSystemLoader([Path(__file__).parent.parent / \"templates\"]),\n        auto_reload=False,\n    )\n    env.filters[\"any\"] = rendering.do_any\n    env.filters[\"heading\"] = rendering.do_heading\n    env.filters[\"as_attributes_section\"] = rendering.do_as_attributes_section\n    env.filters[\"as_classes_section\"] = rendering.do_as_classes_section\n    env.filters[\"as_functions_section\"] = rendering.do_as_functions_section\n    env.filters[\"as_modules_section\"] = rendering.do_as_modules_section\n    env.filters[\"filter_objects\"] = rendering.do_filter_objects\n    env.filters[\"format_code\"] = rendering.do_format_code\n    env.filters[\"format_signature\"] = rendering.do_format_signature\n    env.filters[\"format_attribute\"] = rendering.do_format_attribute\n    env.filters[\"order_members\"] = rendering.do_order_members\n    env.filters[\"split_path\"] = rendering.do_split_path\n    env.filters[\"stash_crossref\"] = lambda ref, length: ref\n    env.filters[\"from_private_package\"] = rendering.from_private_package\n\n    return env\n</code></pre>"},{"location":"reference/api/#griffe2md.render_object_docs","title":"render_object_docs","text":"<pre><code>render_object_docs(\n    obj: Object, config: ConfigDict | None = None\n) -&gt; str\n</code></pre> <p>Render docs for a given object.</p> <p>Parameters:</p> <ul> <li> <code>obj</code>               (<code>Object</code>)           \u2013            <p>The Griffe object to render docs for.</p> </li> <li> <code>config</code>               (<code>ConfigDict | None</code>, default:                   <code>None</code> )           \u2013            <p>The rendering configuration.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Markdown.</p> </li> </ul> Source code in <code>src/griffe2md/_internal/main.py</code> <pre><code>def render_object_docs(obj: Object, config: ConfigDict | None = None) -&gt; str:\n    \"\"\"Render docs for a given object.\n\n    Parameters:\n        obj: The Griffe object to render docs for.\n        config: The rendering configuration.\n\n    Returns:\n        Markdown.\n    \"\"\"\n    env = prepare_env()\n    context = prepare_context(obj, config)\n    rendered = env.get_template(f\"{obj.kind.value}.md.jinja\").render(**context)\n    return mdformat.text(rendered)\n</code></pre>"},{"location":"reference/api/#griffe2md.render_package_docs","title":"render_package_docs","text":"<pre><code>render_package_docs(\n    package: str, config: ConfigDict | None = None\n) -&gt; str\n</code></pre> <p>Render docs for a given package.</p> <p>Parameters:</p> <ul> <li> <code>package</code>               (<code>str</code>)           \u2013            <p>The package (name) to render docs for.</p> </li> <li> <code>config</code>               (<code>ConfigDict | None</code>, default:                   <code>None</code> )           \u2013            <p>The rendering configuration.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Markdown.</p> </li> </ul> Source code in <code>src/griffe2md/_internal/main.py</code> <pre><code>def render_package_docs(package: str, config: ConfigDict | None = None) -&gt; str:\n    \"\"\"Render docs for a given package.\n\n    Parameters:\n        package: The package (name) to render docs for.\n        config: The rendering configuration.\n\n    Returns:\n        Markdown.\n    \"\"\"\n    config = cast(\"ConfigDict\", {**default_config, **(config or {})})\n    parser = config[\"docstring_style\"] and Parser(config[\"docstring_style\"])\n    loader = GriffeLoader(docstring_parser=parser)\n    module = loader.load(package)\n    loader.resolve_aliases(external=True)\n    return render_object_docs(module, config)  # type: ignore[arg-type]\n</code></pre>"},{"location":"reference/api/#griffe2md.write_package_docs","title":"write_package_docs","text":"<pre><code>write_package_docs(\n    package: str,\n    config: ConfigDict | None = None,\n    output: IO | str | None = None,\n) -&gt; None\n</code></pre> <p>Write docs for a given package to a file or stdout.</p> <p>Parameters:</p> <ul> <li> <code>package</code>               (<code>str</code>)           \u2013            <p>The package to render docs for.</p> </li> <li> <code>config</code>               (<code>ConfigDict | None</code>, default:                   <code>None</code> )           \u2013            <p>The rendering configuration.</p> </li> <li> <code>output</code>               (<code>IO | str | None</code>, default:                   <code>None</code> )           \u2013            <p>The file to write to.</p> </li> </ul> Source code in <code>src/griffe2md/_internal/main.py</code> <pre><code>def write_package_docs(\n    package: str,\n    config: ConfigDict | None = None,\n    output: IO | str | None = None,\n) -&gt; None:\n    \"\"\"Write docs for a given package to a file or stdout.\n\n    Parameters:\n        package: The package to render docs for.\n        config: The rendering configuration.\n        output: The file to write to.\n    \"\"\"\n    _output(render_package_docs(package, config), to=output)\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}